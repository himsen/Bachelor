Some documentation for the EECM_Torben software.


Notes:

- The implementation of Erasthothenes sieve use a lot of memory but can handle values of B2 up to 1'400'000'000
  if one increase the size of the Java heap with the option -Xmx. Example: %java -Xmx3G EECM_Torben 1337 
  which will increase the heap to 3 gigabyte. 

- The program will exit if one input a higher B2 bound than B1. That is, if manually setting both the B1 and B2 bounds
  the B1 bound should be written before B2. 


Default values:

B1 = 10'000
B2 = 100'000
Number of curves = Integer.MAX_VALUE-1
Number of threads = 2
Radix of the number input = 10


Options:

-B1x Specify the B1 bound to be x. x must be written in base 10.

-B2x Specify the B2 bound to be x. x must be written in base 10.

-NTx Specify the number of threads java should use to be x. It is not ensured that java actually use 4 cores
     if one input -NT4 and have a 4 corre machine. Java is in control. x must be written in base 10 and is restricted
     to Integer.MAX_VALUE.

-NCx Specify that the number of curves that is tried is x. x must be in base 10 and is restricted to Integer.MAX_VALUE.

-FSx This will calculate a (heuristic) optimal value for B1 and B2 with respect to a search for a factor
     with x digits. x is restricted to 69 and must be in base 10. 

-HE Output which options the user may choose.

One may also input numbers in other bases than 10. This is done by appending (x) in front of the number you wish to process. 
x is the bases in which the number has been written. If the number is in normal base 10 there is no need to append (10) the
program will process the number as base 10 in default. Say you want to input 10 but in binary i.e. 1010. Input

%java EECM_Torben (2)1010


Examples:

Example 1. Factor 2^(2^7)+1.

%java EECM_Torben 340282366920938463463374607431768211457

Example 2. Factor 2^(2^7)+1 but this time assume we have an idea that it has a 56 bit factor (approx 17 digits).

%java EECM_Torben -FS17 340282366920938463463374607431768211457

Example 3. We still want to factor 2^(2^7)+1 with the idea it has a 56 bit factor, but want to restrict us to trying
	   300 curves. 

%java EECM_Torben -FS17 -NC300 340282366920938463463374607431768211457

Example 4. Factor 2^(2^8)+1 but we use a machine with 4 cores and want to use all of them (instead of the default 2).

%java EECM_Torben -NT4 115792089237316195423570985008687907853269984665640564039457584007913129639937

Example 5. Factor 2^(2^7)+1 but with other values B1 and B2.

%java EECM_Torben -B110000 -B21000000 340282366920938463463374607431768211457

Example 6. We want to factor 2^(2^9)+1 and want other values of B1 and B2 but such high that we need more space in the java heap.

%java -Xmx3G EECM_Torben -B115000000 -B2150000000 13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084097
(On my machine the above run produced the factor 2'424'833 using 559 sec. doing only 2 curves.
The big modular operations really kill the performance. The 9th Fermat number is a 513 bit number.)
